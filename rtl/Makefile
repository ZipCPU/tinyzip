################################################################################
##
## Filename: 	rtl/Makefile
##
## Project:	TinyZip, a demonstration project for the TinyFPGA B2 board
##
## Purpose:	To direct the Verilator build of the SoC sources.  The result
##		is C++ code (built by Verilator), that is then built (herein)
##	into a library.
##
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
##
## Copyright (C) 2015-2018, Gisselquist Technology, LLC
##
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of  the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
##
## License:	GPL, v3, as defined and found on www.gnu.org,
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
##
.PHONY: all
all:	cpudefs.h design.h verilated tinyzip.bin
YYMMDD=`date +%Y%m%d`
CXX   := g++
FBDIR := .
VDIRFB:= $(FBDIR)/obj_dir
VOBJ := obj_dir
include auto.mk
SUBMAKE := $(MAKE) --no-print-directory --directory=$(VOBJ) -f
ifeq ($(VERILATOR_ROOT),)
VERILATOR := verilator
else
VERILATOR := $(VERILATOR_ROOT)/bin/verilator
endif
VFLAGS     = -MMD -O3 -Wall -trace -Mdir $(VDIRFB) $(AUTOVDIRS) -cc

#
# Verilator build from the main level.  This is not the toplevel verilog
# file, but one beneath it, so as to allow the top level file to contain device
# specific logic and functions (PLLs, etc.).
#
#
.PHONY: test verilated
test:	verilated

.PHONY: verilated
verilated: $(VDIRFB)/Vmain__ALL.a

$(VDIRFB)/Vmain__ALL.a: $(VDIRFB)/Vmain.h $(VDIRFB)/Vmain.cpp
$(VDIRFB)/Vmain__ALL.a: $(VDIRFB)/Vmain.mk

$(VDIRFB)/V%.cpp: $(VDIRFB)/V%.h
$(VDIRFB)/V%.mk:  $(VDIRFB)/V%.h
$(VDIRFB)/V%.h: $(FBDIR)/%.v
	$(VERILATOR) $(VFLAGS) $*.v

$(VDIRFB)/Vmain.cpp: $(VDIRFB)/Vmain.h
$(VDIRFB)/Vmain.mk:  $(VDIRFB)/Vmain.h
$(VDIRFB)/Vmain.h: main.v $(VFLIST)
	$(VERILATOR) $(VFLAGS) main.v

cpudefs.h: cpu/cpudefs.v
	@echo "Building cpudefs.h"
	@echo "// " > $@
	@echo "// Do not edit this file, it is automatically generated!" >> $@
	@echo "// To generate this file, \"make cpudefs.h\" in the rtl directory." >> $@
	@echo "// " >> $@
	@echo >> $@
	@sed -e '{ s/^`/#/ }' $< | sed -e ' s/cpudefs.v/cpudefs.h/' >> $@
	@echo >> $@

design.h: main.v
	@echo "Building design.h"
	@echo "// " > $@
	@echo "// Do not edit this file, it is automatically generated!" >> $@
	@echo "// To generate this file, \"make design.h\" in the rtl directory." >> $@
	@echo "// " >> $@
	@echo "#ifndef DESIGN_H" >> $@
	@echo "#define DESIGN_H" >> $@
	@echo >> $@
	@grep "^\`" $< | grep -v default_nettype | grep -v include | sed -e '{ s/^`/#/ }' | sed -e ' s/main.v/design.h/' | grep -v timescale >> $@
	@echo >> $@
	@echo "#endif // DESIGN_H" >> $@

$(VDIRFB)/V%__ALL.a: $(VDIRFB)/V%.mk
	cd $(VDIRFB); make -f V$*.mk

#
#
#
.PHONY: bin
bin: tinyzip.bin
#
#
tinyzip.json: tinyzip.blif
tinyzip.blif: toplevel.v $(VFLIST)
	yosys -ql yosys.log -p 'synth_ice40 -blif tinyzip.blif -json tinyzip.json -top toplevel' $^

.PHONY: yosys
yosys: tinyzip.blif

PCFFILE=tinyzip.pcf
tinyzip.asc: $(PCFFILE) tinyzip.blif
	arachne-pnr -d 8k -r -P cm81 -p $(PCFFILE) tinyzip.blif -o $@

.PHONY: arachne
arachne: tinyzip.asc

tinyzip.bin: tinyzip.asc
	icetime -d lp8k -c 25 $<
	icepack $< $@

archive:
	tar --transform s,^,$(YYMMDD)-rtl/, -chjf $(YYMMDD)-rtl.tjz Makefile *.v cpu/*.v

.PHONY: clean
clean:
	rm -rf *.blif *.asc *.bin
	rm -rf $(VDIRFB)/*.mk
	rm -rf $(VDIRFB)/*.cpp
	rm -rf $(VDIRFB)/*.h
	rm -rf $(VDIRFB)/
	rm -rf design.h cpudefs.h

DEPS := $(wildcard $(VDIRFB)/*.d)
ifneq ($(DEPS),)
include $(DEPS)
endif
