////////////////////////////////////////////////////////////////////////////////
//
// Filename:	../auto-generated/regdefs.h
//
// Project:	TinyZip, a demonstration project for the TinyFPGA B2 board
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	autofpga autofpga -o ../auto-generated global.txt bkram.txt buserr.txt pllclock.txt pic.txt pwrcount.txt version.txt hbconsole.txt gpio.txt dlyarbiter.txt zipbones.txt flexpress.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2018, Gisselquist Technology, LLC
//
// This program is free software (firmware): you can redistribute it and/or
// modify it under the terms of  the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
//
// License:	GPL, v3, as defined and found on www.gnu.org,
//		http://www.gnu.org/licenses/gpl.html
//
//
////////////////////////////////////////////////////////////////////////////////
//
//
#ifndef	REGDEFS_H
#define	REGDEFS_H


//
// The @REGDEFS.H.INCLUDE tag
//
// @REGDEFS.H.INCLUDE for masters
// @REGDEFS.H.INCLUDE for peripherals
// And finally any master REGDEFS.H.INCLUDE tags
// End of definitions from REGDEFS.H.INCLUDE


//
// Register address definitions, from @REGS.#d
//
#define	R_FLASHCFG      	0x00100000	// 00100000, wbregs names: FLASHCFG
// The bus timer
#define	R_BUSTIMER      	0x00200000	// 00200000, wbregs names: BUSTIMER
// The bus timer
#define	R_BUSTIMER      	0x00200000	// 00200000, wbregs names: BUSTIMER
// The watchdog timer
#define	R_WATCHDOG      	0x00200004	// 00200004, wbregs names: WATCHDOG
// The watchdog timer
#define	R_WATCHDOG      	0x00200004	// 00200004, wbregs names: WATCHDOG
// CONSOLE registers
#define	R_CONSOLE_FIFO  	0x00300004	// 00300000, wbregs names: UFIFO
#define	R_CONSOLE_UARTRX	0x00300008	// 00300000, wbregs names: RX
#define	R_CONSOLE_UARTTX	0x0030000c	// 00300000, wbregs names: TX
#define	R_BUSERR        	0x00400000	// 00400000, wbregs names: BUSERR
#define	R_BUSERR        	0x00400000	// 00400000, wbregs names: BUSERR
#define	R_PIC           	0x00400004	// 00400004, wbregs names: PIC
#define	R_PIC           	0x00400004	// 00400004, wbregs names: PIC
#define	R_GPIO          	0x00400008	// 00400008, wbregs names: GPIO, GPI, GPO
#define	R_GPIO          	0x00400008	// 00400008, wbregs names: GPIO, GPI, GPO
#define	R_PWRCOUNT      	0x0040000c	// 0040000c, wbregs names: PWRCOUNT
#define	R_PWRCOUNT      	0x0040000c	// 0040000c, wbregs names: PWRCOUNT
#define	R_VERSION       	0x00400010	// 00400010, wbregs names: VERSION
#define	R_VERSION       	0x00400010	// 00400010, wbregs names: VERSION
#define	R_BKRAM         	0x00500000	// 00500000, wbregs names: RAM
#define	R_FLASH         	0x00800000	// 00800000, wbregs names: FLASH
#define	R_ZIPCTRL       	0x01000000	// 01000000, wbregs names: CPU
#define	R_ZIPDATA       	0x01000004	// 01000000, wbregs names: CPUD


//
// The @REGDEFS.H.DEFNS tag
//
// @REGDEFS.H.DEFNS for masters
#define	CLKFREQHZ	25000000
#define	R_ZIPCTRL	0x01000000
#define	R_ZIPDATA	0x01000004
#define	RESET_ADDRESS	0x00820000
#define	BAUDRATE	1000000
// @REGDEFS.H.DEFNS for peripherals
#define	BKRAMBASE	0x00500000
#define	BKRAMLEN	0x00002000
#define	FLASHBASE	0x00800000
#define	FLASHLEN	0x00800000
#define	FLASHLGLEN	23
// @REGDEFS.H.DEFNS at the top level
// End of definitions from REGDEFS.H.DEFNS
//
// The @REGDEFS.H.INSERT tag
//
// @REGDEFS.H.INSERT for masters

#define	CPU_GO		0x0000
#define	CPU_RESET	0x0040
#define	CPU_INT		0x0080
#define	CPU_STEP	0x0100
#define	CPU_STALL	0x0200
#define	CPU_HALT	0x0400
#define	CPU_CLRCACHE	0x0800
#define	CPU_sR0		0x0000
#define	CPU_sSP		0x000d
#define	CPU_sCC		0x000e
#define	CPU_sPC		0x000f
#define	CPU_uR0		0x0010
#define	CPU_uSP		0x001d
#define	CPU_uCC		0x001e
#define	CPU_uPC		0x001f


// @REGDEFS.H.INSERT for peripherals
// Flash memory constants
#define	SZPAGEB		256
#define	PGLENB		256
#define	SZPAGEW		64
#define	PGLENW		64
#define	NPAGES		256
#define	SECTORSZB	(NPAGES * SZPAGEB)	// In bytes, not words!!
#define	SECTORSZW	(NPAGES * SZPAGEW)	// In words
#define	NSECTORS	64
#define	SECTOROF(A)	((A) & (-1<<16))
#define	SUBSECTOROF(A)	((A) & (-1<<12))
#define	PAGEOF(A)	((A) & (-1<<8))

// @REGDEFS.H.INSERT from the top level
typedef	struct {
	unsigned	m_addr;
	const char	*m_name;
} REGNAME;

extern	const	REGNAME	*bregs;
extern	const	int	NREGS;
// #define	NREGS	(sizeof(bregs)/sizeof(bregs[0]))

extern	unsigned	addrdecode(const char *v);
extern	const	char *addrname(const unsigned v);
// End of definitions from REGDEFS.H.INSERT


#endif	// REGDEFS_H
